Imports System.Web
Imports BPS_BL.BPS
Imports System.Configuration
Imports System.Text.RegularExpressions
Imports System.Data.SqlClient
Imports System.Data
Imports System.Drawing.Imaging


Namespace Management


    Public Class Utilities

        Public Function ImageResizer(ByVal origImage As System.Drawing.Image, ByVal NewWidth As Integer, ByVal NewHeight As Integer) As Drawing.Image

            Dim thumbnail As New System.Drawing.Bitmap(NewWidth, NewHeight)
            Dim graphic As System.Drawing.Graphics

            graphic = System.Drawing.Graphics.FromImage(thumbnail)
            Dim Info As System.Drawing.Imaging.ImageCodecInfo()
            Info = System.Drawing.Imaging.ImageCodecInfo.GetImageEncoders()
            Dim Params As System.Drawing.Imaging.EncoderParameters
            Params = New System.Drawing.Imaging.EncoderParameters(1)
            Params.Param(0) = New System.Drawing.Imaging.EncoderParameter(System.Drawing.Imaging.Encoder.Quality, 100L)

            'set quality properties
            graphic.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic
            graphic.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality
            graphic.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality
            graphic.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality

            graphic.DrawImage(origImage, 0, 0, NewWidth, NewHeight)

            Return thumbnail

        End Function

        Private Function ResizeCurrentImage(ByVal imageWidth As Integer, ByVal imageHeight As Integer, ByVal OriginalImageUrl As String, ByVal NewImageURL As String) As Boolean
            Dim thumbNailImg As System.Drawing.Image
            Dim fullSizeImg As System.Drawing.Image


            Try
                fullSizeImg = System.Drawing.Image.FromFile(OriginalImageUrl)

                thumbNailImg = ImageResizer(fullSizeImg, imageWidth, imageHeight)

                Dim FullPath As String = NewImageURL

                'thumbNailImg.Save(FullPath, ImageFormat.Jpeg)

                If InStr(OriginalImageUrl.ToString.ToLower, "png") > 0 Then
                    thumbNailImg.Save(FullPath, ImageFormat.Png)
                Else
                    thumbNailImg.Save(FullPath, ImageFormat.Jpeg)
                End If

                'Dim NewResizedImageID As Integer = AddImageFile(NewFileName, "Alternate Image View", ImagePath & NewFileName)
                'If NewResizedImageID > 0 Then
                '    Me.AddImageFiletoResource(NewResizedImageID)
                'Else
                '    Throw New Exception("Error saving resized alternate image")
                'End If

                'CleanUpFile(ImageUrl, OriginalImageID) 'Delete the original file. 

                'Clean up / Dispose...
                thumbNailImg.Dispose()

                ResizeCurrentImage = True

            Catch ex As Exception
                ResizeCurrentImage = False
            Finally
                thumbNailImg = Nothing
                fullSizeImg = Nothing
            End Try
        End Function

        Public Shared Function BuildImageUploadPath(ByVal Company As Integer, ByVal Brand As Integer, ByVal ResourceType As Integer) As String

            Dim strImageUploadPath As String = ""

            Dim SQLConn As New SqlConnection(ConfigurationManager.ConnectionStrings("BaseDBConnection").ConnectionString) 'SQLConnection Object

            Dim SQLCommand As New SqlCommand   'SQLCommand Object
            Dim SQLDataReader As SqlDataReader 'SQLDataReader
            ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


            Try 'Only one "Try" statement 

                'This would be caused by invalid product setup
                'Check to see if BrandID is 0 is so, set to the default Brand ID so it builds a valid upload path. 
                If Brand = 0 Then Brand = ConfigurationManager.AppSettings("BrandID")


                'Set string to base image path (as a starting point)
                strImageUploadPath = ConfigurationManager.AppSettings("ContentPublishDirectory").ToString
                Try
                    'Trap any error generated by \\server\ (no shared folder name) 

                    If Not System.IO.Directory.Exists(strImageUploadPath) Then
                        System.IO.Directory.CreateDirectory(strImageUploadPath)
                    End If

                Catch ex As Exception
                    'Do nothing...\\servername will be joint with the company and brand name.
                    '\\servername\companyname\brandname

                End Try
                SQLConn.Open() 'Open Database

                'Set the Basic Command Information 
                SQLCommand.CommandType = CommandType.StoredProcedure     'We're using Stored Procedures
                SQLCommand.Connection = SQLConn                          'Set the Connection

                SQLCommand.CommandText = "[GetResourceNamesForImageUploadPath]"

                'Set the ProdcutID Parameter
                SQLCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@CompanyID", System.Data.SqlDbType.Int, 4, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, Company))
                SQLCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@BrandID", System.Data.SqlDbType.Int, 4, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, Brand))
                SQLCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ResourceTypeID", System.Data.SqlDbType.Int, 4, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, ResourceType))

                'Set the DataReader
                SQLDataReader = SQLCommand.ExecuteReader(CommandBehavior.SingleResult)

                'Build path based on returned paramaters
                If SQLDataReader.Read Then
                    strImageUploadPath = strImageUploadPath & SQLDataReader("Company") & "\" & SQLDataReader("Brand") & "\" & SQLDataReader("ResourceType") & "\Images\"
                    If Not System.IO.Directory.Exists(strImageUploadPath) Then
                        System.IO.Directory.CreateDirectory(strImageUploadPath)
                    End If
                End If

                'Cleanup
                SQLDataReader.Close()
                SQLConn.Close()

                BuildImageUploadPath = strImageUploadPath


            Catch SQLErr As SqlException

                BuildImageUploadPath = SQLErr.Message.ToString 'strImageUploadPath 'Returns just the base path in case of error
            Catch Err As Exception
                BuildImageUploadPath = Err.Message.ToString ' strImageUploadPath 'Returns just the base path in case of error
            Finally
                'Confirm that The SQLDB Connection is closed
                If SQLConn.State = ConnectionState.Open Then SQLConn.Close()
                SQLDataReader = Nothing
                SQLCommand = Nothing
                SQLConn = Nothing
            End Try

        End Function

        Public Shared Function GetAlternateThumbnailImagePath(ByVal FilePath As String) As String
            Dim NewFileName As String = ""

            Try

                'NewFileName = GetImageURL(Left(FilePath, InStrRev(FilePath, ".jpg") - 1) & "_thumbnail.jpg")


                If InStr(FilePath.ToString.ToLower, "png") > 0 Then
                    NewFileName = GetImageURL(Left(FilePath, InStrRev(FilePath, ".png") - 1) & "_thumbnail.png")
                Else
                    NewFileName = GetImageURL(Left(FilePath, InStrRev(FilePath, ".jpg") - 1) & "_thumbnail.jpg")
                End If


                Return NewFileName

            Catch ex As Exception
                Return GetImagePath(-3)

            End Try

        End Function


        Public Shared Function GetFileName(ByVal FullFileName As String) As String
            Dim tempImageName As String = ""
            Dim pos As Integer = 0
            Dim ilen As Integer = 0

            pos = InStrRev(FullFileName, "/")
            If pos = 0 Then
                pos = InStrRev(FullFileName, "\")
            End If

            ilen = Len(FullFileName) - pos
            Return Right(FullFileName, ilen)

        End Function

        Public Shared Function parseProductNumberFromFileName(ByVal FileName As String) As String
            Dim ProductNumber As String = ""

            ProductNumber = Left(FileName, InStrRev(FileName, ".") - 1)
            ' LogError("Product Number" & ProductNumber)
            Return ProductNumber

        End Function


        Public Shared Function GetImagePath(ByVal ImageResourceImageID As Integer) As String
            Dim oImage As New BPS_BL.BPS.Image
            Dim sImage As BPS_BL.BPS.sImage
            sImage = Nothing
            GetImagePath = ""

            sImage.ImageID = ImageResourceImageID

            Try
                If oImage.GetImage(sImage) Then
                    GetImagePath = GetImageURL(sImage.ImagePath)
                End If

            Catch ex As Exception
                GetImagePath = ""
            Finally
                oImage = Nothing
            End Try

            Return GetImagePath

        End Function

        Public Shared Function ValidateStringInput(ByVal strInput As String) As Boolean
            'Dim re As Regex
            Dim isMatch As Match

            isMatch = Regex.Match(strInput, "^[^<>`~!/@\#}$%:;)(_^{&*=|'+]+$")
            Return isMatch.Success()

        End Function
        Public Shared Function GetImageURL(ByVal ImagePath As String) As String

            Dim URLImagePath As String = ""

            Try
                URLImagePath = Replace(LCase(ImagePath), LCase(ConfigurationManager.AppSettings("PhysicalImageSource").ToString), LCase(ConfigurationManager.AppSettings("HttpImageSource").ToString))

                URLImagePath = Replace(URLImagePath, "\", "/")

                'Remove any hard coded drives
                URLImagePath = Replace(URLImagePath, "d$/", "")
                URLImagePath = Replace(URLImagePath, "c$/", "")
                URLImagePath = Replace(URLImagePath, "e$/", "")

                URLImagePath = Trim(URLImagePath)

            Catch ex As Exception
                URLImagePath = GetImagePath(-2) 'Use default image 
            End Try
           

            Return URLImagePath
        End Function
        'Public Shared Function GetImageURL(ByVal ImagePath As String) As String
        '    Dim URLImagePath As String = ""
        '    Try

        '        URLImagePath = Replace(LCase(ImagePath), LCase(ConfigurationManager.AppSettings("ContentPublishDirectory").ToString), LCase(ConfigurationManager.AppSettings("ImageSource").ToString))

        '        URLImagePath = Replace(URLImagePath, "\", "/")

        '        URLImagePath = Trim(URLImagePath)

        '    Catch ex As Exception
        '        URLImagePath = GetImagePath(-2) 'Use default image 
        '    End Try

        '    Return URLImagePath
        'End Function

    End Class

    Public NotInheritable Class Add
        Public Shared Function ItemtoDropDownList(ByVal ItemText As String, ByVal ItemValue As String, Optional ByVal ItemSelected As Boolean = False)

            Dim TempListItem As New ListItem
            With TempListItem
                .Text = ItemText
                .Value = ItemValue
                .Selected = ItemSelected 'True
            End With
            Return TempListItem
        End Function

        'Public Shared Function tableRowElement() As Boolean
        '    Return False
        'End Function

    End Class

    Public Class DataCube

        Dim sErrorNumber As String
        Dim sErrorDescription As String

        Public Property ErrorNumber() As String
            Get
                Return sErrorNumber
            End Get
            Set(ByVal Value As String)
                sErrorNumber = Value
            End Set
        End Property

        Public Property ErrorDescription() As String
            Get
                Return sErrorDescription
            End Get
            Set(ByVal Value As String)
                sErrorDescription = Value
            End Set
        End Property

        Public Function GetDataSource(ByVal DataCubeID As String, Optional ByVal TypeID As Integer = 0) As sDataSource

            Dim oReader As SqlDataReader
            Dim oCnn As New SqlConnection(ConfigurationManager.ConnectionStrings("LLFPublicWebsiteConnectionString").ConnectionString)
            Dim oCmd As New SqlCommand
            Dim sDataSource As New sDataSource
            oCmd.CommandText = "DataCube.GetDataSource"
            oCmd.CommandType = CommandType.StoredProcedure
            oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DataCubeID", System.Data.SqlDbType.VarChar, 50, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, DataCubeID))
            oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@TypeID", System.Data.SqlDbType.Int, 4, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, TypeID))

            oCmd.Connection = oCnn
            Try
                oCnn.Open()
                oReader = oCmd.ExecuteReader(CommandBehavior.SingleResult) 'Single Resultset only
                If oReader.Read Then
                    sDataSource.ID = DataCubeID
                    If Not Microsoft.VisualBasic.IsDBNull(oReader("table_DisplayName")) Then sDataSource.tableDisplayField = oReader("table_DisplayName")
                    If Not Microsoft.VisualBasic.IsDBNull(oReader("table_KeyName1")) Then sDataSource.tableKey1 = oReader("table_KeyName1")
                    If Not Microsoft.VisualBasic.IsDBNull(oReader("table_KeyName2")) Then sDataSource.tableKey2 = oReader("table_KeyName2")
                    If Not Microsoft.VisualBasic.IsDBNull(oReader("table_KeyName3")) Then sDataSource.tableKey3 = oReader("table_KeyName3")
                    If Not Microsoft.VisualBasic.IsDBNull(oReader("table_SelectionField")) Then sDataSource.tableValueField = oReader("table_SelectionField")
                    If Not Microsoft.VisualBasic.IsDBNull(oReader("table_View_Name")) Then sDataSource.tableViewName = oReader("table_View_Name")
                    ' If Not Microsoft.VisualBasic.IsDBNull(oReader("ElementID")) Then sDataSource.SelectedElementID = oReader("ElementID")
                    If Not Microsoft.VisualBasic.IsDBNull(oReader("DataItemType_ID")) Then sDataSource.TypeID = oReader("DataItemType_ID")
                End If

            Catch e As SqlException
                Dim sErrorDescription As String = e.Message.ToString
            Catch ex As Exception
                Dim sErrorDescription As String = ex.Message.ToString
            Finally
                If oCnn.State = ConnectionState.Open Then oCnn.Close()

            End Try


            Return sDataSource
            sDataSource = Nothing




        End Function
        Public Function GetDataCubeDefaultByType(ByVal DataCubeID As String, ByVal DataTypeID As Integer, Optional ByVal bMergeDataFields As Boolean = False) As sDateCubeElement
            Dim sDataItemElement As New sDateCubeElement
            Dim oCnn As New SqlConnection(ConfigurationManager.ConnectionStrings("LLFPublicWebsiteConnectionString").ConnectionString)
            Dim oCmd As New SqlCommand
            Dim oReader As SqlDataReader
            Dim oDataReader As SqlDataReader

            Dim strQueryStringParams As String = ""
            Dim strTempQueryStringParam As String = ""
            Dim bHasMergeField As Boolean = False
            Dim strFieldList As String = ""

            Try
                oCnn.Open()

                oCmd.CommandText = "DataCube.GetDataCubeByType"
                oCmd.CommandType = System.Data.CommandType.StoredProcedure
                oCmd.Connection = oCnn

                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DataCubeID", System.Data.SqlDbType.VarChar, 50, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, DataCubeID))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@TypeID", System.Data.SqlDbType.Int, 4, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, DataTypeID))

                oReader = oCmd.ExecuteReader()
                Dim RowCount As Integer = 0
                While oReader.Read()
                    With sDataItemElement

                        If RowCount = 0 Then
                            'Populate only once. 
                            .DataCubeID = oReader("DataCube_ID")
                            'Nullable Values 
                            If Not IsDBNull(oReader("ElementID")) Then .ElementID = oReader("ElementID") Else .ElementID = ""
                            If Not IsDBNull(oReader("Description")) Then .Description = oReader("Description") Else .Description = ""
                            If Not IsDBNull(oReader("Enabled")) Then .Enabled = oReader("Enabled") Else .Enabled = False
                            If Not IsDBNull(oReader("Height")) Then .Height = oReader("Height") Else .Height = 100
                            If Not IsDBNull(oReader("Width")) Then .Width = oReader("Width") Else .Width = 100
                            If Not IsDBNull(oReader("Target")) Then .Target = oReader("Target") Else .Target = "_Self"
                            If Not IsDBNull(oReader("SourceCode")) Then .SourceCode = oReader("SourceCode") Else .SourceCode = ""
                            If Not IsDBNull(oReader("SourcePage")) Then .SourcePage = oReader("SourcePage") Else .SourcePage = ""
                            If Not IsDBNull(oReader("ScriptPage_Name")) Then .ScriptPage_Name = oReader("ScriptPage_Name") Else .ScriptPage_Name = ""
                            If Not IsDBNull(oReader("ScriptPage_URL")) Then .ScriptPage_URL = oReader("ScriptPage_URL") Else .ScriptPage_URL = ""
                            If Not IsDBNull(oReader("Optional_Text")) Then .Optional_Text = oReader("Optional_Text") Else .Optional_Text = ""
                            If Not IsDBNull(oReader("Image")) Then .Image = oReader("Image") Else .Image = ""
                            If Not IsDBNull(oReader("ImagePath")) Then .ImagePath = oReader("ImagePath") Else .ImagePath = ""
                            If Not IsDBNull(oReader("Name")) Then .Name = oReader("Name") Else .Name = ""
                            If Not IsDBNull(oReader("table_View_Name")) Then .tableViewName = oReader("table_View_Name") Else .tableViewName = ""
                            If Not IsDBNull(oReader("table_KeyName1")) Then .tableKey1 = oReader("table_KeyName1") Else .tableKey1 = ""
                            If Not IsDBNull(oReader("table_KeyName2")) Then .tableKey2 = oReader("table_KeyName2") Else .tableKey2 = ""
                            If Not IsDBNull(oReader("table_KeyName3")) Then .tableKey3 = oReader("table_KeyName3") Else .tableKey3 = ""
                            If Not IsDBNull(oReader("table_SelectionField")) Then .tableSelectionField = oReader("table_SelectionField") Else .tableSelectionField = ""
                            If Not IsDBNull(oReader("DataItemType_ID")) Then .TypeID = oReader("DataItemType_ID") Else .TypeID = ""
                            If Not IsDBNull(oReader("EnableTarget")) Then .AllowTargetChange = CType(oReader("EnableTarget"), Boolean) Else .AllowTargetChange = False
                            If Not IsDBNull(oReader("EnableSourceCode")) Then .AllowSourceChange = CType(oReader("EnableSourceCode"), Boolean) Else .AllowSourceChange = False
                            If Not IsDBNull(oReader("ReplaceImage")) Then .AllowImageChange = CType(oReader("ReplaceImage"), Boolean) Else .AllowImageChange = False
                            If Not IsDBNull(oReader("Clickable")) Then .AllowHyperLink = CType(oReader("Clickable"), Boolean) Else .AllowHyperLink = False
                        End If

                        'Get List of all parameters. 
                        If Not (Microsoft.VisualBasic.IsDBNull(oReader("ParamName")) AndAlso Microsoft.VisualBasic.IsDBNull(oReader("ParamValue"))) Then
                            strTempQueryStringParam += oReader("ParamName") & "=" & oReader("ParamValue") & "&"
                            'Check For Mergable Data Fields in querystring parameters
                            If InStr(oReader("ParamValue"), "<@") AndAlso InStr(oReader("ParamValue"), "@>") Then
                                bHasMergeField = True
                                If Not InStr(strFieldList, GetFieldName(oReader("ParamValue"))) > 0 Then
                                    strFieldList += GetFieldName(oReader("ParamValue")) & ","
                                End If

                            End If
                            strQueryStringParams = strQueryStringParams & "" & strTempQueryStringParam
                            strTempQueryStringParam = ""
                        End If

                        RowCount += 1
                    End With
                End While

                'Trim Last Character from QueryString
                If Len(strQueryStringParams) > 1 Then
                    strQueryStringParams = Left(strQueryStringParams, Len(strQueryStringParams) - 1)
                End If


                oCmd = Nothing
                oReader.Close()

                If bMergeDataFields Then
                    'Check for an data that should be populated from database table...The data is contain within specified delimiters. <@item_id@>

                    'Only Check Mergable Data Fields
                    If InStr(sDataItemElement.Description, "<@") AndAlso InStr(sDataItemElement.Description, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.Description)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.Description) & ","
                        End If
                    End If

                    If InStr(sDataItemElement.Image, "<@") AndAlso InStr(sDataItemElement.Image, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.Image)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.Image) & ","
                        End If
                    End If

                    If InStr(sDataItemElement.ImagePath, "<@") AndAlso InStr(sDataItemElement.ImagePath, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.ImagePath)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.ImagePath) & ","
                        End If
                    End If

                    If InStr(sDataItemElement.ScriptPage_Name, "<@") AndAlso InStr(sDataItemElement.ScriptPage_Name, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.ScriptPage_Name)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.ScriptPage_Name) & ","
                        End If
                    End If

                    If InStr(sDataItemElement.Optional_Text, "<@") AndAlso InStr(sDataItemElement.Optional_Text, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.Optional_Text)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.Optional_Text) & ","
                        End If

                    End If

                    If InStr(sDataItemElement.SourceCode, "<@") AndAlso InStr(sDataItemElement.SourceCode, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.SourceCode)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.SourceCode) & ","
                        End If

                    End If

                    If InStr(sDataItemElement.ScriptPage_URL, "<@") AndAlso InStr(sDataItemElement.ScriptPage_URL, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.ScriptPage_URL)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.ScriptPage_URL) & " ,"
                        End If

                    End If

                    'Prepare to Merge Data Fields.
                    strFieldList = Left(strFieldList, Len(strFieldList) - 1)
                    Dim strtableName As String = sDataItemElement.tableViewName
                    Dim strWhereClause As String = ""
                    Dim ParamName As String = "@" & sDataItemElement.tableSelectionField
                    strWhereClause = sDataItemElement.tableSelectionField & " = " & ParamName

                    'Make sure sql string is valid 
                    If bHasMergeField Then

                        Try
                            If oCnn.State = ConnectionState.Closed Then oCnn.Open()
                            oCmd = New SqlCommand
                            oCmd.CommandText = String.Format("Select {0} from {1} Where {2} = {3}", strFieldList, strtableName, sDataItemElement.tableSelectionField, ParamName)
                            oCmd.CommandType = System.Data.CommandType.Text
                            oCmd.Connection = oCnn
                            oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter(ParamName, System.Data.SqlDbType.VarChar, 50, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, RTrim(sDataItemElement.ElementID)))
                            oDataReader = oCmd.ExecuteReader()

                            If oDataReader.Read Then
                                'Replace merge field names with data
                                Dim i As Integer = 0
                                Do Until i > oDataReader.FieldCount() - 1
                                    Dim strValue As String = ""
                                    If IsDBNull(oDataReader(i)) Then
                                        strValue = ""
                                    Else
                                        strValue = CType(oDataReader(i), String)
                                    End If
                                    sDataItemElement.Description = Replace(sDataItemElement.Description, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    sDataItemElement.Image = Replace(sDataItemElement.Image, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    sDataItemElement.ImagePath = Replace(sDataItemElement.ImagePath, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    sDataItemElement.Optional_Text = Replace(sDataItemElement.Optional_Text, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    sDataItemElement.SourceCode = Replace(sDataItemElement.SourceCode, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    sDataItemElement.ScriptPage_Name = Replace(sDataItemElement.ScriptPage_Name, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    sDataItemElement.ScriptPage_URL = Replace(sDataItemElement.ScriptPage_URL, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    strQueryStringParams = Replace(strQueryStringParams, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    i += 1
                                Loop

                            End If

                            If bMergeDataFields Then
                                sDataItemElement.ScriptPage_Name += "?" & strQueryStringParams
                            End If


                        Catch ex As SqlException
                            sErrorNumber = ex.Number.ToString
                            sErrorDescription = ex.Message.ToString
                        Catch e As Exception
                            sErrorNumber = -1
                            sErrorDescription = e.Message.ToString
                        End Try

                    End If
                Else
                    ' sDataItemElement.ScriptPage_Name += "?" & strQueryStringParams
                End If
            Catch ex As SqlException
                sErrorNumber = ex.Number.ToString
                sErrorDescription = ex.Message.ToString

            Catch e As Exception
                sErrorNumber = -1
                sErrorDescription = e.Message.ToString
            Finally
                If oCnn.State = ConnectionState.Open Then oCnn.Close()
                oCnn = Nothing
            End Try


            Return sDataItemElement

            sDataItemElement = Nothing


        End Function



        Public Function GetDataCubeElement(ByVal DataCubeID As String, Optional ByVal bMergeDataFields As Boolean = True) As sDateCubeElement
            Dim oCnn As New SqlConnection(ConfigurationManager.ConnectionStrings("LLFPublicWebsiteConnectionString").ConnectionString)
            Dim oCmd As New SqlCommand
            Dim oReader As SqlDataReader
            Dim oDataReader As SqlDataReader
            Dim sDataItemElement As New sDateCubeElement
            Dim strQueryStringParams As String = ""
            Dim strTempQueryStringParam As String = ""
            Dim bHasMergeField As Boolean = False
            Dim strFieldList As String = ""

            Try
                oCnn.Open()

                oCmd.CommandText = "DataCube.GetDataCubeByID"
                oCmd.CommandType = System.Data.CommandType.StoredProcedure
                oCmd.Connection = oCnn

                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DataCubeID", System.Data.SqlDbType.VarChar, 50, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, DataCubeID))

                oReader = oCmd.ExecuteReader()
                Dim RowCount As Integer = 0
                While oReader.Read()
                    With sDataItemElement

                        If RowCount = 0 Then
                            'Populate only once. 
                            .DataCubeID = oReader("DataCube_ID")
                            'Nullable Values 
                            If Not IsDBNull(oReader("ElementID")) Then .ElementID = oReader("ElementID") Else .ElementID = ""
                            If Not IsDBNull(oReader("Description")) Then .Description = oReader("Description") Else .Description = ""
                            If Not IsDBNull(oReader("Enabled")) Then .Enabled = oReader("Enabled") Else .Enabled = False
                            If Not IsDBNull(oReader("Height")) Then .Height = oReader("Height") Else .Height = 100
                            If Not IsDBNull(oReader("Width")) Then .Width = oReader("Width") Else .Width = 100
                            If Not IsDBNull(oReader("Target")) Then .Target = oReader("Target") Else .Target = "_Self"
                            If Not IsDBNull(oReader("SourceCode")) Then .SourceCode = oReader("SourceCode") Else .SourceCode = ""
                            If Not IsDBNull(oReader("SourcePage")) Then .SourcePage = oReader("SourcePage") Else .SourcePage = ""
                            If Not IsDBNull(oReader("ScriptPage_Name")) Then .ScriptPage_Name = oReader("ScriptPage_Name") Else .ScriptPage_Name = ""
                            If Not IsDBNull(oReader("ScriptPage_URL")) Then .ScriptPage_URL = oReader("ScriptPage_URL") Else .ScriptPage_URL = ""
                            If Not IsDBNull(oReader("Optional_Text")) Then .Optional_Text = oReader("Optional_Text") Else .Optional_Text = ""
                            If Not IsDBNull(oReader("Image")) Then .Image = oReader("Image") Else .Image = ""
                            If Not IsDBNull(oReader("ImagePath")) Then .ImagePath = oReader("ImagePath") Else .ImagePath = ""
                            If Not IsDBNull(oReader("Name")) Then .Name = oReader("Name") Else .Name = ""
                            If Not IsDBNull(oReader("table_View_Name")) Then .tableViewName = oReader("table_View_Name") Else .tableViewName = ""
                            If Not IsDBNull(oReader("table_KeyName1")) Then .tableKey1 = oReader("table_KeyName1") Else .tableKey1 = ""
                            If Not IsDBNull(oReader("table_KeyName2")) Then .tableKey2 = oReader("table_KeyName2") Else .tableKey2 = ""
                            If Not IsDBNull(oReader("table_KeyName3")) Then .tableKey3 = oReader("table_KeyName3") Else .tableKey3 = ""
                            If Not IsDBNull(oReader("table_SelectionField")) Then .tableSelectionField = oReader("table_SelectionField") Else .tableSelectionField = ""
                            If Not IsDBNull(oReader("DataItemType_ID")) Then .TypeID = oReader("DataItemType_ID") Else .TypeID = ""
                            If Not IsDBNull(oReader("EnableTarget")) Then .AllowTargetChange = CType(oReader("EnableTarget"), Boolean) Else .AllowTargetChange = False
                            If Not IsDBNull(oReader("EnableSourceCode")) Then .AllowSourceChange = CType(oReader("EnableSourceCode"), Boolean) Else .AllowSourceChange = False
                            If Not IsDBNull(oReader("ReplaceImage")) Then .AllowImageChange = CType(oReader("ReplaceImage"), Boolean) Else .AllowImageChange = False
                            If Not IsDBNull(oReader("Clickable")) Then .AllowHyperLink = CType(oReader("Clickable"), Boolean) Else .AllowHyperLink = False

                        End If

                        'Get List of all parameters. 
                        If Not (Microsoft.VisualBasic.IsDBNull(oReader("ParamName")) AndAlso Microsoft.VisualBasic.IsDBNull(oReader("ParamValue"))) Then
                            strTempQueryStringParam += oReader("ParamName") & "=" & oReader("ParamValue") & "&"
                            'Check For Mergable Data Fields in querystring parameters
                            If InStr(oReader("ParamValue"), "<@") AndAlso InStr(oReader("ParamValue"), "@>") Then
                                bHasMergeField = True
                                If Not InStr(strFieldList, GetFieldName(oReader("ParamValue"))) > 0 Then
                                    strFieldList += GetFieldName(oReader("ParamValue")) & ","
                                End If

                            End If
                            strQueryStringParams = strQueryStringParams & "" & strTempQueryStringParam
                            strTempQueryStringParam = ""
                        End If

                        RowCount += 1
                    End With
                End While

                If Len(strQueryStringParams) > 1 Then
                    'Trim Last Character from QueryString
                    strQueryStringParams = Left(strQueryStringParams, Len(strQueryStringParams) - 1)
                End If


                oCmd = Nothing
                oReader.Close()

                If bMergeDataFields Then
                    'Check for an data that should be populated from database table...The data is contain within specified delimiters. <@item_id@>

                    'For the Description Field Check for multible mergeable fields
                    Dim StrArray As Array = Split(sDataItemElement.Description, " ")
                    Dim z As Integer = 0
                    For z = 0 To StrArray.Length - 1
                        If InStr(StrArray(z), "<@") AndAlso InStr(StrArray(z), "@>") Then
                            If Not InStr(strFieldList, GetFieldName(StrArray(z))) > 0 Then
                                strFieldList += GetFieldName(StrArray(z)) & ","
                                bHasMergeField = True
                            End If
                        End If
                    Next
                    StrArray = Nothing
                    'If InStr(sDataItemElement.Description, "<@") AndAlso InStr(sDataItemElement.Description, "@>") Then
                    '    bHasMergeField = True
                    '    If Not InStr(strFieldList, GetFieldName(sDataItemElement.Description)) > 0 Then
                    '        strFieldList += GetFieldName(sDataItemElement.Description) & ","
                    '    End If
                    'End If

                    If InStr(sDataItemElement.Image, "<@") AndAlso InStr(sDataItemElement.Image, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.Image)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.Image) & ","
                        End If
                    End If

                    If InStr(sDataItemElement.ImagePath, "<@") AndAlso InStr(sDataItemElement.ImagePath, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.ImagePath)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.ImagePath) & ","
                        End If
                    End If

                    If InStr(sDataItemElement.ScriptPage_Name, "<@") AndAlso InStr(sDataItemElement.ScriptPage_Name, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.ScriptPage_Name)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.ScriptPage_Name) & ","
                        End If
                    End If

                    If InStr(sDataItemElement.Optional_Text, "<@") AndAlso InStr(sDataItemElement.Optional_Text, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.Optional_Text)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.Optional_Text) & ","
                        End If

                    End If

                    If InStr(sDataItemElement.SourceCode, "<@") AndAlso InStr(sDataItemElement.SourceCode, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.SourceCode)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.SourceCode) & ","
                        End If

                    End If

                    If InStr(sDataItemElement.ScriptPage_URL, "<@") AndAlso InStr(sDataItemElement.ScriptPage_URL, "@>") Then
                        bHasMergeField = True
                        If Not InStr(strFieldList, GetFieldName(sDataItemElement.ScriptPage_URL)) > 0 Then
                            strFieldList += GetFieldName(sDataItemElement.ScriptPage_URL) & " ,"
                        End If

                    End If





                    'Make sure sql string is valid 
                    If bHasMergeField Then
                        'Prepare to Merge Data Fields.
                        strFieldList = Left(strFieldList, Len(strFieldList) - 1)
                        Dim strtableName As String = sDataItemElement.tableViewName
                        Dim strWhereClause As String = ""
                        Dim ParamName As String = "@" & sDataItemElement.tableSelectionField
                        strWhereClause = sDataItemElement.tableSelectionField & " = " & ParamName

                        Try
                            If oCnn.State = ConnectionState.Closed Then oCnn.Open()
                            oCmd = New SqlCommand
                            oCmd.CommandText = String.Format("Select {0} from {1} Where {2} = {3}", strFieldList, strtableName, sDataItemElement.tableSelectionField, ParamName)
                            oCmd.CommandType = System.Data.CommandType.Text
                            oCmd.Connection = oCnn
                            oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter(ParamName, System.Data.SqlDbType.VarChar, 50, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, RTrim(sDataItemElement.ElementID)))
                            oDataReader = oCmd.ExecuteReader()

                            If oDataReader.Read Then
                                'Replace merge field names with data
                                Dim i As Integer = 0
                                Do Until i > oDataReader.FieldCount() - 1

                                    Dim strValue As String = ""
                                    If IsDBNull(oDataReader(i)) Then
                                        strValue = ""
                                    Else
                                        strValue = CType(oDataReader(i), String)
                                    End If
                                    sDataItemElement.Description = Replace(sDataItemElement.Description, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    sDataItemElement.Image = Replace(sDataItemElement.Image, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    sDataItemElement.ImagePath = Replace(sDataItemElement.ImagePath, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    sDataItemElement.Optional_Text = Replace(sDataItemElement.Optional_Text, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    sDataItemElement.SourceCode = Replace(sDataItemElement.SourceCode, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    sDataItemElement.ScriptPage_Name = Replace(sDataItemElement.ScriptPage_Name, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    sDataItemElement.ScriptPage_URL = Replace(sDataItemElement.ScriptPage_URL, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    strQueryStringParams = Replace(strQueryStringParams, "<@" & oDataReader.GetName(i) & "@>", strValue)
                                    i += 1
                                Loop
                                'Todo If merge fails remove all field names <@fieldname@>
                            End If
                            If bMergeDataFields Then
                                sDataItemElement.ScriptPage_Name += "?" & strQueryStringParams
                            End If

                        Catch ex As SqlException
                            sErrorNumber = ex.Number.ToString
                            sErrorDescription = ex.Message.ToString
                        Catch e As Exception
                            sErrorNumber = -1
                            sErrorDescription = e.Message.ToString
                        End Try

                    End If
                Else
                    'sDataItemElement.ScriptPage_Name += "?" & strQueryStringParams
                End If
            Catch ex As SqlException
                sErrorNumber = ex.Number.ToString
                sErrorDescription = ex.Message.ToString

            Catch e As Exception
                sErrorNumber = -1
                sErrorDescription = e.Message.ToString
            Finally
                If oCnn.State = ConnectionState.Open Then oCnn.Close()
                oCnn = Nothing
            End Try


            Return sDataItemElement

            sDataItemElement = Nothing


        End Function

        Public Function Update(ByVal sDataCube As sDateCubeElement) As Boolean

            Dim oCnn As New SqlConnection(ConfigurationManager.ConnectionStrings("LLFPublicWebsiteConnectionString").ConnectionString)
            Dim oCmd As New SqlCommand

            Try
                oCnn.Open()
                oCmd.CommandText = "DataCube.Update"
                oCmd.CommandType = System.Data.CommandType.StoredProcedure
                oCmd.Connection = oCnn
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DataCubeID", System.Data.SqlDbType.VarChar, 50, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.DataCubeID))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ElementID", System.Data.SqlDbType.VarChar, 50, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.ElementID))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DataTypeID", System.Data.SqlDbType.Int, 4, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.TypeID))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Width", System.Data.SqlDbType.Int, 4, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.Width))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Height", System.Data.SqlDbType.Int, 4, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.Height))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Enabled", System.Data.SqlDbType.Bit, 1, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, Math.Abs(CType(sDataCube.Enabled, Integer))))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.VarChar, 4000, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.Description))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Target", System.Data.SqlDbType.VarChar, 150, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.Target))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ScriptPage", System.Data.SqlDbType.VarChar, 255, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.ScriptPage_Name))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ScriptPage_Url", System.Data.SqlDbType.VarChar, 255, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.ScriptPage_URL))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@OptionalText", System.Data.SqlDbType.VarChar, 150, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.Optional_Text))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Image", System.Data.SqlDbType.VarChar, 150, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.Image))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ImagePath", System.Data.SqlDbType.VarChar, 150, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.ImagePath))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SourceCode", System.Data.SqlDbType.VarChar, 150, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, sDataCube.SourceCode))

                oCmd.ExecuteNonQuery()
                Return True

            Catch e As SqlException
                sErrorNumber = e.Number
                sErrorDescription = e.Message.ToString
                Return False

            Catch ex As Exception
                sErrorNumber = "-1"
                sErrorDescription = ex.Message.ToString
                Return False

            Finally
                If oCnn.State = ConnectionState.Open Then oCnn.Close()
                oCmd = Nothing
            End Try

        End Function

        Public Function CreateDefaultDataCube(ByVal DataCubeID As String, ByVal DataCubeTypeID As Integer) As Boolean

            Dim oCnn As New SqlConnection(ConfigurationManager.ConnectionStrings("LLFPublicWebsiteConnectionString").ConnectionString)
            Dim oCmd As New SqlCommand

            Try
                oCnn.Open()
                oCmd.CommandText = "DataCube.CreateDefaultDataCube"
                oCmd.CommandType = System.Data.CommandType.StoredProcedure
                oCmd.Connection = oCnn
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DataCubeID", System.Data.SqlDbType.VarChar, 50, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, DataCubeID))
                oCmd.Parameters.Add(New System.Data.SqlClient.SqlParameter("@DataTypeID", System.Data.SqlDbType.Int, 4, ParameterDirection.Input, False, CType(0, Byte), CType(0, Byte), "", DataRowVersion.Current, DataCubeTypeID))

                oCmd.ExecuteNonQuery()
                Return True

            Catch e As SqlException
                sErrorNumber = e.Number
                sErrorDescription = e.Message.ToString
                Return False

            Catch ex As Exception
                sErrorNumber = "-1"
                sErrorDescription = ex.Message.ToString
                Return False

            Finally
                If oCnn.State = ConnectionState.Open Then oCnn.Close()
                oCmd = Nothing
            End Try

        End Function

        Private Function GetFieldName(ByVal strFieldName As String) As String
            'Check for an data that should be populated from database table...The data is contain within specified delimiters. <@item_id@>
            'Strip on delimiters and return field name
            Dim strPos As Integer
            Dim endPos As Integer
            Dim tempFieldName As String
            Dim length As Integer

            strPos = InStr(strFieldName, "<@")
            endPos = InStr(strFieldName, "@>")

            'Dim oReg As New Regex("<@

            length = endPos - strPos
            length = length - 2

            tempFieldName = Mid(strFieldName, strPos + 2, length)



            Return tempFieldName




        End Function


    End Class






#Region "Structures_Section"
#Region "DataCube Related Structures"


#End Region
    Public Structure sDataSource
        Dim tableViewName As String
        Dim tableKey1 As String
        Dim tableKey2 As String
        Dim tableKey3 As String
        Dim tableDisplayField As String
        Dim tableValueField As String
        Dim Type As String
        Dim TypeID As Integer
        Dim ID As String
        Dim SelectedElementID As String

    End Structure

    Public Structure sDateCubeElement
        Dim DataCubeID As String
        Dim TypeID As Integer
        Dim Name As String
        Dim SourcePage As String
        Dim DateItem_ID As Integer
        Dim Height As String 'WebControls.Unit
        Dim Width As String 'WebControls.Unit
        Dim Enabled As Boolean
        Dim ActiveDate As Date
        Dim InActiveDate As Date
        Dim ElementID As String
        Dim Image As String
        Dim ImagePath As String
        Dim ScriptPage_Name As String
        Dim ScriptPage_URL As String
        Dim Description As String
        Dim SourceCode As String
        Dim Optional_Text As String
        Dim Target As String
        Dim tableViewName As String
        Dim tableKey1 As String
        Dim tableKey2 As String
        Dim tableKey3 As String
        Dim tableDisplayName As String
        Dim tableSelectionField As String
        Dim AllowTargetChange As Boolean
        Dim AllowSourceChange As Boolean
        Dim AllowImageChange As Boolean
        Dim AllowHyperLink As Boolean


    End Structure
#End Region

#Region "Enum_Section"
    'TODO consolidate these enum values
    Public Enum DataItemType
        Category = 1
        VirtualCategory = 2
        Product = 3
        Promotion = 10
        Text = 8
        Text_Image = 6
        Hyperlink = 7
        Image_Flash = 9

    End Enum

    Public Enum DataCubeType

        Category = 1
        VirtualCategory = 2
        Product = 3
        Promotion = 10
        ProductSeries = 8
        Text_Image = 6
        Hyperlink = 7
        Image_Flash = 9



    End Enum

#End Region

End Namespace
